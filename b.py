# input_str

# floor_index = 0# var to keep track

# for i in input_str:
#     if i == "(":#if ( add one to the answer
#         floor_index += 1
#     if i == ")":# if ( sub one to the answer
#         floor_index -= 1
# print("the final floor is:" , floor_index)

# #! problem 2
# given a set of open and close brackets
# check to see if the input is valid

input_str = "(())"

stack = []

for char in input_str:
    if char == "(":
        stack.append(char)
    else:
        stack.pop()

length = len(stack)

print("the final length is:" , length)

if len(stack) == 0:
    print("the input is valid")
else:
    print("the input is not valid")

